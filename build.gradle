plugins {
	id 'fabric-loom'
	id 'org.jetbrains.kotlin.jvm'
}

group = project.maven_group

repositories {
	maven { url = "https://maven.scijava.org/content/repositories/public" }
	maven { url = 'https://jitpack.io' }
	maven { url = 'https://maven.rikonardo.com/releases' }
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroupByRegex 'dev\\.onyxstudios.*'
		}
	}
}

configurations {
	// Declare a custom configuration to resolve the library from :native
	backend {
		canBeConsumed false
		canBeResolved true
	}
}

dependencies {
	backend(project(':native'))

	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modLocalRuntime "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	include modRuntimeOnly(fabricApi.module("fabric-resource-loader-v0", project.fabric_version)) // we don't need fapi
	include modImplementation("net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}")

	// Best cure for conflicting clients
	include annotationProcessor(implementation("com.github.LlamaLad7:MixinExtras:0.1.1"))

	// all hail rikonardo
	include implementation("dev.virefire.kson:KSON:1.3.1")
	include implementation('dev.virefire.yok:Yok:1.0.4')

	include implementation('com.github.HitMC-Network:brigadier-dsl:4388edb6aa')
}

base {
	archivesBaseName = project.archives_base_name
}

processResources {
	from(configurations.backend)
	inputs.property("version", project.version)
	filesMatching("fabric.mod.json") {
		expand("version": project.version)
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
}

java {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
}

jar {
	setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

loom {
	accessWidenerPath = file("src/main/resources/bloomware.accesswidener")
}

tasks.withType(Exec).configureEach {
	ignoreExitValue true
	workingDir = "${projectDir}/../Obfuscation/"
	doLast { println("Executed <${it.name}>") }
}

tasks.register("obfuscate", Exec) {
	copy {
		from "$buildDir/libs/bloomware.jar"
		into "$projectDir/../Obfuscation/input/"
	}
	commandLine = './patch.sh'
}

tasks.register("push", Exec) {
	commandLine = './push.sh'
}

tasks.register('prepare') {
	dependsOn('build')
	doLast {
		exec {
			copy {
				from "$buildDir/libs/bloomware.jar"
				into "$projectDir/../Obfuscation/input/"
			}
			ignoreExitValue true
			workingDir = "${projectDir}/../Obfuscation/"
			commandLine = './patch.sh'
		}
		exec {
			ignoreExitValue true
			workingDir = "${projectDir}/../Obfuscation/"
			commandLine = './push.sh'
		}
	}
}

compileKotlin.kotlinOptions.jvmTarget = "17"